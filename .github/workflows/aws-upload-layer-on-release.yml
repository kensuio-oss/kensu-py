# based on https://gist.githubusercontent.com/wyllie/1a2d32a3282f817e1f2bebea95ab4c38/raw/a8de9a18281092762a703d48045ac90a87649e88/awsLayer.yml

# This workflow will install dependencies and create a build suitable
# to be used in an AWS Lambda Layer.  The build will then be uploaded
# to S3 and then can be accessed from any lambda that uses the layer.
#
# This build is only for dev builds.  Releases will be built from a
# seperate action.
#
# A new version of the layer will be created for every branch when a
# pull request is intitiated.  This allows us to test the layer in a
# dev environment on AWS BEFORE the code is merged into master.


name: Build Lambda Layer

on:
  release:
    types: [created]

jobs:
  
  deploy:
    name: Upload Layer to AWS Lambda
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2.3.1
        with:
          url: ${{ secrets.VAULT_ADDR }}
          token: ${{ secrets.VAULT_TOKEN }}
          # method: github
          # githubToken: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            secret/aws/presales/eng_integration_bot access_key | AWS_ACCESS_KEY_ID ;
            secret/aws/presales/eng_integration_bot secret_key | AWS_SECRET_ACCESS_KEY ;

      # For more info: https://github.com/aws-actions/configure-aws-credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ steps.secrets.outputs.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ steps.secrets.outputs.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.LAMBDA_LAYERAWS_REGION }}
          # if you have/need it
          # aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Setup Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: '3.8'

      - name: Zip it all up and create a lambda layer
        env:
          release_bucket: ${{ secrets.LAMBDA_LAYER_S3_BUCKET_NAME }}
          # '<the uri for your S3 bucket - like s3://my_bucket_name>'
          # e.g. ${{ format('s3://{0}', secrets.LAMBDA_LAYER_S3_BUCKET_NAME) }}
          release_bucket_uri: ${{ format('s3://{0}/{1}/', secrets.LAMBDA_LAYER_S3_BUCKET_NAME, secrets.LAMBDA_LAYER_S3_UPLOAD_DIR) }}
          # for layers of PRs we could also use github.ref_head
          release_id: ${{ format('kensu-py-{0}-dev.zip', github.sha ) }}
          release_file_key: ${{ format('{0}/{1}', secrets.LAMBDA_LAYER_S3_UPLOAD_DIR, format('kensu-py-{0}-dev.zip', github.sha )) }}
          release_layer: 'kensu-py--dev'
        run: |
          mkdir python
          pip install -e ".[all-but-test]"
          pip install .
          echo building release $release_id
          # zip it up
          zip --quiet -r $release_id python
          
          # copy the file to S3 and install it in lambda layers
          aws s3 cp $release_id $release_bucket_uri
          aws lambda publish-layer-version --layer-name $release_layer  --content S3Bucket=$release_bucket,S3Key=$release_file_key  --license-info 'Apache-2.0' --compatible-runtimes  python3.8 > layer.json
      
      - name: Extract layer info
        run: |
          # see https://docs.github.com/en/actions/learn-github-actions/workflow-commands-for-github-actions#setting-an-environment-variable
          # without version
          echo "LAYER_ARN=$(cat layer.json | jq -r '.LayerArn')" >> $GITHUB_ENV
          # arn with version
          echo "LAYER_VERSION_ARN=$(cat layer.json| jq -r '.LayerVersionArn')" >> $GITHUB_ENV
          # just the version number, without ARN
          echo "LAYER_VERSION_NUMBER=$(cat layer.json| jq -r '.Version')" >> $GITHUB_ENV

      - name: Set permissions for new lambda layer version
        run: |
          # make layer version public
          aws lambda add-layer-version-permission --layer-name "$LAYER_ARN" --version-number "$LAYER_VERSION_NUMBER" --statement-id allow-all --principal '*' --action lambda:GetLayerVersion --output text
