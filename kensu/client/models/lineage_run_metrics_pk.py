# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: develop
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LineageRunMetricsPK(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'process_run_ref': 'LineageRunRef',
        'observed_at': 'int'
    }

    attribute_map = {
        'process_run_ref': 'processRunRef',
        'observed_at': 'observedAt'
    }

    def __init__(self, process_run_ref=None, observed_at=None):  # noqa: E501
        """LineageRunMetricsPK - a model defined in Swagger"""  # noqa: E501
        self._process_run_ref = None
        self._observed_at = None
        self.discriminator = None
        if process_run_ref is not None:
            self.process_run_ref = process_run_ref
        self.observed_at = observed_at

    @property
    def process_run_ref(self):
        """Gets the process_run_ref of this LineageRunMetricsPK.  # noqa: E501


        :return: The process_run_ref of this LineageRunMetricsPK.  # noqa: E501
        :rtype: LineageRunRef
        """
        return self._process_run_ref

    @process_run_ref.setter
    def process_run_ref(self, process_run_ref):
        """Sets the process_run_ref of this LineageRunMetricsPK.


        :param process_run_ref: The process_run_ref of this LineageRunMetricsPK.  # noqa: E501
        :type: LineageRunRef
        """

        self._process_run_ref = process_run_ref

    @property
    def observed_at(self):
        """Gets the observed_at of this LineageRunMetricsPK.  # noqa: E501

        The time at which the lineage run metrics have been observed (epoch millis).  # noqa: E501

        :return: The observed_at of this LineageRunMetricsPK.  # noqa: E501
        :rtype: int
        """
        return self._observed_at

    @observed_at.setter
    def observed_at(self, observed_at):
        """Sets the observed_at of this LineageRunMetricsPK.

        The time at which the lineage run metrics have been observed (epoch millis).  # noqa: E501

        :param observed_at: The observed_at of this LineageRunMetricsPK.  # noqa: E501
        :type: int
        """
        if observed_at is None:
            raise ValueError("Invalid value for `observed_at`, must not be `None`")  # noqa: E501

        self._observed_at = observed_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LineageRunMetricsPK, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LineageRunMetricsPK):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
